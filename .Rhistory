group_by(stove_type, pc_binned) %>%
mutate(
prop_in_state2 = n_in_state/sum(n_in_state)
)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,fill=use_state))+geom_area()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,fill=use_state))+geom_line()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state))+geom_line()+facet_wrap(~stove_type)
ts_data$pc_binned=round(ts_data$prop_complete,1)
pc_state_data = ts_data %>%
group_by(village, stove, stove_type, event_num, pc_binned, use_state) %>%
summarise(
n_in_state = n()
)
pc_state_data = pc_state_data %>%
group_by(village, stove, stove_type, event_num, pc_binned) %>%
mutate(
prop_in_state = n_in_state/sum(n_in_state)
)
#instead of time series, this is "proportion complete" data (e.g. 10% completed)
pc_state_events = pc_state_data %>%
group_by(stove_type, pc_binned,use_state) %>%
summarise(
prop_in_state = mean(prop_in_state, na.rm = T),
n_in_state = sum(prop_in_state, na.rm = T)
)
pc_state_events = pc_state_events %>%
group_by(stove_type, pc_binned) %>%
mutate(
prop_in_state2 = n_in_state/sum(n_in_state)
)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state))+geom_line()+facet_wrap(~stove_type)
?round
g_round=function(x,s){
round(x*s,0)/s
}
ts_data$pc_binned=g_round(ts_data$prop_complete,20)
pc_state_data = ts_data %>%
group_by(village, stove, stove_type, event_num, pc_binned, use_state) %>%
summarise(
n_in_state = n()
)
pc_state_data = pc_state_data %>%
group_by(village, stove, stove_type, event_num, pc_binned) %>%
mutate(
prop_in_state = n_in_state/sum(n_in_state)
)
#instead of time series, this is "proportion complete" data (e.g. 10% completed)
pc_state_events = pc_state_data %>%
group_by(stove_type, pc_binned,use_state) %>%
summarise(
prop_in_state = mean(prop_in_state, na.rm = T),
n_in_state = sum(prop_in_state, na.rm = T)
)
pc_state_events = pc_state_events %>%
group_by(stove_type, pc_binned) %>%
mutate(
prop_in_state2 = n_in_state/sum(n_in_state)
)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state))+geom_line()+facet_wrap(~stove_type)
##percent complete data
pc_data = ts_data %>%
group_by(village, stove, stove_type, event_num, pc_binned) %>%
summarise(
prop_ready= sum(is_usb_available)/n(),
prop_charging = sum(is_charging)/n(), #what proportion of the PC you spend charging
prop_charging_pot_off = sum(is_charging_pot_off)/n(), #what proportion of the PC you spend charging with pot off
prop_charging_pot_off_ratio = prop_charging_pot_off / prop_charging, #ratio of pot off charging to total charging time
prop_charging_usb_on_ratio = sum(is_charging) / sum(is_usb_available) #propotion of USB available time spent charging
)
#instead of time series, this is "proportion complete" data (e.g. 10% completed)
pc_events = pc_data %>%
group_by(stove_type, pc_binned) %>%
summarise(
prop_charging_event = mean(prop_charging, na.rm = T),
prop_charging_pot_off_event = mean(prop_charging_pot_off, na.rm = T),
prop_charging_pot_off_ratio_event = mean(prop_charging_pot_off_ratio, na.rm = T),
prop_charging_usb_on_ratio_event = mean(prop_charging_usb_on_ratio, na.rm = T)
)
pc_events = pc_data %>%
group_by(stove_type, pc_binned) %>%
summarise(
prop_ready = mean(prop_read, na.rm=T),
prop_charging_event = mean(prop_charging, na.rm = T),
prop_charging_pot_off_event = mean(prop_charging_pot_off, na.rm = T),
prop_charging_pot_off_ratio_event = mean(prop_charging_pot_off_ratio, na.rm = T),
prop_charging_usb_on_ratio_event = mean(prop_charging_usb_on_ratio, na.rm = T)
)
pc_events = pc_data %>%
group_by(stove_type, pc_binned) %>%
summarise(
prop_ready = mean(prop_ready, na.rm=T),
prop_charging_event = mean(prop_charging, na.rm = T),
prop_charging_pot_off_event = mean(prop_charging_pot_off, na.rm = T),
prop_charging_pot_off_ratio_event = mean(prop_charging_pot_off_ratio, na.rm = T),
prop_charging_usb_on_ratio_event = mean(prop_charging_usb_on_ratio, na.rm = T)
)
#make data to plot charging as a function of percentage of event completed
pc_events_plot = filter(melt(pc_events, id.vars = c("stove_type","pc_binned")), stove_type == 'USB')
### plots and such
f1 = ggplot(pc_events_plot) +
geom_smooth(aes(x = pc_binned, y = value,
color = factor(variable, labels = c("charging probability",
"pot off & charging probability",
"pot-off charging:charging",
"charging:USB availability")))) +
labs(x = "% of Event Completed", y = "Probability or Ratio", color = "",
title = "Charging vs. Event Completion") +
ylim(0,1) + theme_bw() +
theme(legend.key = element_rect(colour = NA)) + guides(color=guide_legend(override.aes=list(fill=NA))) +
scale_color_brewer(palette = "Set1")
f1
f1 = ggplot(pc_events_plot) +
geom_smooth(aes(x = pc_binned, y = value,
color = factor(variable, labels = c("usb prob","charging probability",
"pot off & charging probability",
"pot-off charging:charging",
"charging:USB availability")))) +
labs(x = "% of Event Completed", y = "Probability or Ratio", color = "",
title = "Charging vs. Event Completion") +
ylim(0,1) + theme_bw() +
theme(legend.key = element_rect(colour = NA)) + guides(color=guide_legend(override.aes=list(fill=NA))) +
scale_color_brewer(palette = "Set1")
f1
pc_data
pc_data[pc_data$prop_charging_pot_off==1,]
pc_data[pc_data$prop_charging_pot_off==0.5,]
pc_state_data[pc_data$prop_in_state==0.5&pc_data$use_state="pot-off charging",]
pc_state_data[pc_data$prop_in_state==0.5&pc_data$use_state=="pot-off charging",]
pc_state_data[pc_state_data$prop_in_state==0.5&pc_state_data$use_state=="pot-off charging",]
0.25*135
(0.25*135)*10
((0.25*135)*10)/52
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state,color=use_state))+geom_line()+facet_wrap(~stove_type)
table(ts_data$pot_state,ts_data$use_state,ts_data$charge_state)
table(ts_data$pot_state,ts_data$charge_state,ts_data$use_state)
table(ts_data$usb_state,ts_data$charge_state,ts_data$use_state)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state))+geom_line()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=n_in_state,color=use_state))+geom_line()+facet_wrap(~stove_type)
pc_state_events = pc_state_data %>%
group_by(stove_type, pc_binned,use_state) %>%
summarise(
prop_in_state = mean(prop_in_state, na.rm = T),
n_in_state = sum(n_in_state, na.rm = T)
)
pc_state_events = pc_state_events %>%
group_by(stove_type, pc_binned) %>%
mutate(
prop_in_state2 = n_in_state/sum(n_in_state)
)
ggplot(pc_state_events,aes(x=pc_binned,y=n_in_state,color=use_state))+geom_line()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state))+geom_line()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,fill=use_state))+geom_area()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state))+geom_line()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state))+geom_area()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state,fill=NA))+geom_area()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state,fill=NULL))+geom_area()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state))+geom_area(fill="white")+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state))+geom_area(fill="white")+facet_wrap(~stove_type)+theme_bw()
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,fill=use_state))+geom_area()+facet_wrap(~stove_type)+
theme_bw()+scale_y_continuous(expand=c(0,0))+scale_x_continuous(expand=c(0,0))
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,fill=use_state))+geom_area()+facet_wrap(~stove_type)+
theme_bw()+scale_y_continuous(expand=c(0,0))+scale_x_continuous(expand=c(0,0))+scale_fill_manual(c("#100000","#100000","#100000","#100000","#100000","#100000"))
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,color=use_state))+geom_line()+facet_wrap(~stove_type)
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,fill=use_state))+geom_area()+facet_wrap(~stove_type)+
theme_bw()+scale_y_continuous(expand=c(0,0))+scale_x_continuous(expand=c(0,0))+
scale_fill_manual(values=c("#100000","#100000","#100000","#100000","#100000","#100000"))
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,fill=use_state))+geom_area()+facet_wrap(~stove_type)+
theme_bw()+scale_y_continuous(expand=c(0,0))+scale_x_continuous(expand=c(0,0))+
scale_fill_manual(values=c("#10FFFF","#10FFFF","#10FFFF","#10FFFF","#10FFFF","#10FFFF"))
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,fill=use_state))+geom_area()+facet_wrap(~stove_type)+
theme_bw()+scale_y_continuous(expand=c(0,0))+scale_x_continuous(expand=c(0,0))+
scale_fill_manual(values=c("#ff9999","#ff3333","#cc0000","#b3cce6","#6699cc","#336699"))
ggplot(pc_state_events,aes(x=pc_binned,y=prop_in_state2,fill=use_state))+geom_area()+facet_wrap(~stove_type)+
theme_bw()+scale_y_continuous(expand=c(0,0))+scale_x_continuous(expand=c(0,0))+
scale_fill_manual(values=c("#ff9999","#ff3333","#cc0000","#b3cce6","#6699cc","#336699"))+
guides(fill=guide_legend(ncol=2))
events = ts_data %>%
select(village, stove, stove_type, datetime, event_num, temperature, fan_state, pot_state, usb_state, charge_state) %>%
group_by(village, stove, stove_type, event_num) %>%
summarise(duration = difftime(max(datetime), min(datetime), units = "mins"),
start_event_datetime = min(datetime),
obs = n(),
sampling_interval = duration/obs * 60,
charge_time = length(which(charge_state == 'charging')) * sampling_interval / 60,
charge_no_pot_time = length(which(charge_state == 'charging' & pot_state == 'off')) * sampling_interval / 60,
pot_off_time = length(which(pot_state == 'off')) * sampling_interval / 60,
charge_obs = length(which(charge_state == 'charging')),
charge_no_pot_obs = length(which(charge_state == 'charging' & pot_state == 'off')),
charge_no_pot_prop = charge_no_pot_obs/obs,
charge_prop = charge_obs/obs,
pot_off_obs = length(which(pot_state == 'off')),
pot_off_prop = pot_off_obs/obs * 100,
usb_available_obs = length(which(usb_state == 'on')),
charging_obs = length(which(charge_state == 'charging')),
charging_prop_of_usb_available = charging_obs/usb_available_obs)
events = merge(events, deploys, by = 'village')
events$start_event_days_in = difftime(events$start_event_datetime, events$start_datetime, units = 'days')
users = events %>%
group_by(village, stove, stove_type)%>%
summarise(
min_per_day = sum(duration)/as.numeric(median(deploy_period, na.rm = T)),
charging_per_day = sum(charge_time)/as.numeric(median(deploy_period, na.rm = T)),
charging_pot_off_per_day = sum(charge_no_pot_time)/as.numeric(median(deploy_period, na.rm = T)),
charge_time_avg = mean(charge_time, na.rm = T),
charge_no_pot_time_avg = mean(charge_no_pot_time, na.rm = T),
pot_off_time_avg = mean(pot_off_time, na.rm = T),
pot_off_prop_avg = sum(pot_off_time)/as.numeric(sum(duration)),
duration_avg = mean(duration, na.rm = T),
duration_total = sum(duration),
event_count = n(),
obs_days = median(deploy_period)
)
types_from_events = events %>%
group_by(stove_type) %>%
summarise(
duration_avg = mean(duration, na.rm = T),
duration_sd = sd(duration, na.rm = T),
charge_time_avg = mean(charge_time, na.rm = T),
charge_time_sd = sd(charge_time, na.rm = T),
charge_no_pot_time_avg = mean(charge_no_pot_time, na.rm = T),
charge_no_pot_time_sd = sd(charge_no_pot_time, na.rm = T),
pot_off_charging_prop_of_charging = charge_no_pot_time_avg / charge_time_avg,
pot_off_time_avg = mean(pot_off_time, na.rm = T),
pot_off_time_sd = sd(pot_off_time, na.rm = T),
pot_off_prop_avg = mean(pot_off_prop, na.rm = T),
pot_off_prop_sd = sd(pot_off_prop, na.rm = T),
pot_off_charging_prop_avg = mean(charge_no_pot_prop, na.rm = T),
pot_off_charging_prop_sd = sd(charge_no_pot_prop, na.rm = T),
use_time_hr = sum(duration) / 60, #hrs
event_count = n()
)
types_from_users = users %>%
group_by(stove_type) %>%
summarise(
users = n(),
obs_days = sum(obs_days),
use_per_day_avg = mean(min_per_day, na.rm = T),
use_per_day_sd = sd(min_per_day, na.rm = T),
charging_per_day_avg = mean(charging_per_day, na.rm = T),
charging_per_day_sd = sd(charging_per_day, na.rm = T),
charging_pot_off_per_day_avg = mean(charging_pot_off_per_day, na.rm = T),
charging_pot_off_per_day_sd = sd(charging_pot_off_per_day, na.rm = T)
)
types = merge(types_from_events, types_from_users, by = "stove_type")
marginal_pot_off_prop = diff(types$pot_off_prop_avg)/100
marginal_pot_off_use = marginal_pot_off_prop * select(filter(types, stove_type == "USB"), use_per_day_avg)
expected_pot_off_charging = select(filter(types, stove_type == "USB"), charging_per_day_avg) *
select(filter(types, stove_type == "no USB"), pot_off_prop_avg)/100
extra_pot_off_charging = c(as.numeric(select(filter(types, stove_type == "USB"),
charging_pot_off_per_day_avg) - expected_pot_off_charging), 0)
extra_pot_off_not_charging = c(as.numeric(marginal_pot_off_use - extra_pot_off_charging[1]), 0)
cooking_and_charging = c(as.numeric(select(filter(types, stove_type == "USB"),
charging_per_day_avg) - extra_pot_off_charging[1]), 0)
cooking_alone = c(as.numeric(select(filter(types, stove_type == "USB"), use_per_day_avg)),
as.numeric(select(filter(types, stove_type == "no USB"), use_per_day_avg))) -
cooking_and_charging - extra_pot_off_not_charging - extra_pot_off_charging
stove_type = c("USB", "no USB")
daily_use = data.frame(extra_pot_off_charging, extra_pot_off_not_charging, cooking_and_charging, cooking_alone, stove_type)
daily_use_long = melt(daily_use, id.vars = "stove_type")
daily_use_long$variable = factor(daily_use_long$variable, labels=c("extra pot off time",
"extra pot off & charging",
"cooking & charging",
"cooking"))
daily_use_test = t.test(as.numeric(filter(users, stove_type == "USB")$min_per_day),
as.numeric(filter(users, stove_type == "no USB")$min_per_day))
pot_off_test = t.test(filter(events, stove_type == "USB")$pot_off_prop ,
filter(events, stove_type == "no USB")$pot_off_prop)
duration_test = t.test(as.numeric(filter(events, stove_type == "USB")$duration),
as.numeric(filter(events, stove_type == "no USB")$duration))
### plots and such
f1 = ggplot(pc_events_plot) +
geom_smooth(aes(x = pc_binned, y = value,
color = factor(variable, labels = c("usb prob","charging probability",
"pot off & charging probability",
"pot-off charging:charging",
"charging:USB availability")))) +
labs(x = "% of Event Completed", y = "Probability or Ratio", color = "",
title = "Charging vs. Event Completion") +
ylim(0,1) + theme_bw() +
theme(legend.key = element_rect(colour = NA)) + guides(color=guide_legend(override.aes=list(fill=NA))) +
scale_color_brewer(palette = "Set1")
f1
ggsave("figures/proportions.pdf", width = 6, height = 3, units = "in")
unlink("proportions.pdf")
bar_data = arrange(daily_use_long, -row_number())
bar_data$value
bar_data = bar_data %>%
group_by(stove_type) %>%
mutate(pos = cumsum(value) - (0.5 * value))
fbar = ggplot(bar_data, aes(x = stove_type, y = value, fill = variable,
label = sprintf("%.1f", round(value, digits = 1)))) +
geom_bar(stat = "identity") + theme_bw() + geom_text(aes(y = pos), color = "white", size = 3) +
theme(legend.key = element_rect(colour = NA)) + scale_fill_brewer(palette = "Spectral") +
labs(x = "Stove Type", y = "Duration (min/day)", title = "Use Modes", fill = "Mode")
fbar
ggsave("figures/use-bar.pdf", width = 4, height = 3.5, units = "in")
unlink("use-bar.pdf")
events_long = melt(events)
users_long = melt(users)
densities = filter(rbind(events_long, users_long),
variable == "pot_off_prop" | variable == "duration" & value < 300 | variable == "min_per_day"  )
densities$variable2 = factor(densities$variable, labels =
c("Event Duration (min)", "% of Event w/ Pot Off", "Daily Cooking (min)") )
ggplot(densities) + geom_density(aes(x = value, fill = stove_type), color = NA, alpha = 0.5, adjust = 0.5) +
theme_bw() +
theme(legend.position="none") +
theme(legend.key = element_rect(colour = NA)) + scale_fill_discrete(guide = guide_legend(title = "stove type")) +
facet_grid(stove_type~variable2, scales = "free_x") +
labs(x="", y = "Density", title = "Density Plots of Key Usage Parameters")
ggsave("figures/density-grid.pdf", width = 6, height = 3, units = "in")
unlink("density-grid.pdf")
f5 = ggplot(ts_day_data) + geom_smooth(aes(x = cum_cooking2, y = daily_cooking, color = stove_type), alpha = 0.2) +
xlim(0,10) + theme_bw() +
geom_vline(xintercept = c(2.92, 6.01), linetype = "longdash") +
annotate("text", x = 4.5, y = 2, label = "sample wood \n depleted") +
labs(x = "Cumulative Use (hr)", y = "Daily Use (hr/day)", title = "Daily Use vs. Cumulative Use", color = "Stove Type")
f5
ggsave("figures/cum-use.pdf", width = 5.5, height = 3, units = "in")
unlink("cum-use.pdf")
135/4
library(origami)
cross_validate
combine_results
?prop.2.test
prop.test
?prop.test
setwd("~/Dropbox/origami/")
load_all()
make_repeated_folds <- function(repeats, ...) {
all_folds=replicate(repeats,makes_folds(...))
return(folds)
}
debug(make_repeated_folds)
make_repeated_folds(10)
make_repeated_folds <- function(repeats, ...) {
all_folds=replicate(repeats,make_folds(...))
return(folds)
}
debug(make_repeated_folds)
make_repeated_folds(10)
all_folds
make_repeated_folds <- function(repeats, ...) {
all_folds=replicate(repeats,make_folds(...))
folds=unlist(all_folds)
return(folds)
}
debug(make_repeated_folds)
make_repeated_folds(10)
folds
make_repeated_folds(10,100)
all_folds
make_folds(100)
?replicate
make_repeated_folds <- function(repeats, ...) {
all_folds=replicate(repeats,make_folds(...))
# folds=unlist(all_folds)
return(all_folds)
}
all_folds=make_repeated_folds(10,100)
all_folds
all_folds=make_repeated_folds(10,100,10)
debug(make_folds)
all_folds=make_repeated_folds(10,100,10)
eval(n)
all_folds=make_repeated_folds(10,n=100)
undebug(make_folds)
all_folds=make_repeated_folds(10,n=100)
all_folds=make_repeated_folds(10,n=100,V=10)
debug(make_folds)
all_folds=make_repeated_folds(10,n=100,V=10)
eval(n)
make_repeated_folds <- function(repeats, ...) {
all_folds=make_folds(...)
# folds=unlist(all_folds)
return(all_folds)
}
all_folds=make_repeated_folds(10,n=100,V=10)
undebug(make_folds)
all_folds=make_repeated_folds(10,n=100,V=10)
all_folds=make_repeated_folds(10,100)
all_folds
make_repeated_folds <- function(repeats, ...) {
all_folds=foreach(i=1:repeats) %do% make_folds(...)
# folds=unlist(all_folds)
return(all_folds)
}
all_folds=make_repeated_folds(10,100)
all_folds[[1]]
folds=unlist(all_folds)
make_repeated_folds <- function(repeats, ...) {
all_folds=foreach(i=1:repeats) %do% make_folds(...)
folds=unlist(all_folds)
return(folds)
}
setwd("~/Dropbox/origami/")
library(devtools)
library(formatR)
rebuild <- function() {
tidy_dir(recursive = T, arrow = T)
document()
build()
install()
load_all()
}
rebuild()
install.packages("formatR")
setwd("~/Dropbox/origami/")
library(devtools)
library(formatR)
rebuild <- function() {
tidy_dir(recursive = T, arrow = T)
document()
build()
install()
load_all()
}
rebuild()
rm(make_repeated_folds())
rm(make_repeated_folds
)
folds=make_repeated_folds(10,100)
folds
?make_repeated_folds
setwd("~/Dropbox/origami/")
library(devtools)
library(formatR)
rebuild <- function() {
tidy_dir(recursive = T, arrow = T)
document()
build()
install()
load_all()
}
rebuild()
setwd("~/Dropbox/origami/")
library(devtools)
library(formatR)
rebuild <- function() {
tidy_dir(recursive = T, arrow = T)
document()
build()
install()
load_all()
}
rebuild()
setwd("~/Dropbox/origami/")
library(devtools)
library(formatR)
rebuild <- function() {
tidy_dir(recursive = T, arrow = T)
document()
build()
install()
load_all()
}
rebuild()
?cross_validate
data(mtcars)
# resubstitution MSE
r <- lm(mpg ~ ., data = mtcars)
mean(resid(r)^2)
# function to calculate cross-validated squared error
cvlm <- function(fold) {
train_data <- training(mtcars)
valid_data <- validation(mtcars)
r <- lm(mpg ~ ., data = train_data)
preds <- predict(r, newdata = valid_data)
list(coef = data.frame(t(coef(r))), SE = ((preds - valid_data$mpg)^2))
}
# replicate the resubstitution estimate
resub <- make_folds(mtcars, fold_fun = "resubstitution")[[1]]
resub_results <- cvlm(resub)
mean(resub_results$SE)
# cross-validated estimate
folds <- make_folds(mtcars)
results <- cross_validate(cvlm, folds)
mean(results$SE)
new_folds <- make_folds(mtcars)
new_results <- cross_validate(cvlm, new_folds,.old_results = results)
dim(results)
results
str(results)
cvlm(resub)
str(cvlm(resub))
folds <- make_folds(mtcars)
results <- cross_validate(cvlm, folds)
results
new_results <- cross_validate(cvlm, new_folds)
str(new_results)
results <- cross_validate(cvlm, folds,.combine=F)
results
str(results)
setwd("~/Dropbox/origami/")
library(devtools)
library(formatR)
rebuild <- function() {
tidy_dir(recursive = T, arrow = T)
document()
build()
install()
load_all()
}
rebuild()
results <- cross_validate(cvlm, folds)
mean(results$SE)
new_folds <- make_folds(mtcars)
new_results <- cross_validate(cvlm, new_folds)
new_results <- cross_validate(cvlm, new_folds,.old_results=results)
str(new_results)
?cross_validate
library(SuperLearner)
SuperLearner
