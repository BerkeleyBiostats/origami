data.frame(bias2=(mean(data$value)-trueate)^2,
mse=mean((data$value-trueate)^2),
var=((n-1)/n)*var(data$value))
})
perflong=melt(bootperf,id=c("lambda","est","sample"))
perflong$variable=factor(perflong$variable,levels=c("bias2","var","mse"))
perflong$est=factor(perflong$est,levels=c("psi","psi_tmle"),labels=c("Substitution Estimator","TMLE Estimator"))
pdf("bootperformance.pdf",height=4,width=6)
ggplot(perflong,aes(x=lambda,y=value,color=variable))+geom_line()+
facet_grid(sample~est,scales="free")+
xlab(expression(paste("Smoothing Paramter ",lambda)))+
ylab("Performance")+
scale_color_discrete("Performance Metric",labels=c(expression(Bias^2),expression(Variance),expression(MSE)))+
theme_bw()
dev.off()
iterdata=results[results$mainiteration==1&results$lambda==lambda[1],]
bootci=ddply(results,.(mainiteration,lambda),function(iterdata){
full=iterdata[!iterdata$bootstrap,]
boot=iterdata[iterdata$bootstrap,]
bootsd=sd(boot$psi_tmle)
#bootsd=sd(iterdata$psi[iterdata$bootstrap])
me=qnorm(0.975)*bootsd
est=full$psi_tmle
#est=iterdata$psi[!sldata$bootstrap]
ci=c(est-me,est+me)
coverage=((ci[1]<trueate)&(ci[2]>trueate))
reject=((ci[1]>0)|(ci[2]<0))
ci.length=ci[2]-ci[1]
results=data.frame(est=est,lower=ci[1],upper=ci[2],coverage,fullcoverage=full$coverage,reject,ci.length,bootsd=bootsd,icsd=sqrt(full$icvar/500),fulllambda=full$lambda,bootlambda=mean(boot$lambda))
results
})
library(ggplot2)
lambda=unique(results$lambda)
lambda
me=qnorm(0.975)*sqrt(results$icvar/500)
cis=cbind(results$psi_tmle-me,results$psi_tmle+me)
results$coverage=((cis[,1]<trueate)&(cis[,2]>trueate))
results$reject=((cis[,1]>0)|(cis[,2]<0))
results$length=2*me
iterdata=results[results$mainiteration==1,]
#plot the average risk estimates by trial type
bootQperf=ddply(results,.(lambda,sample),function(data){
sapply(data[,c("cvmse","truemse","resubmse")],mean)
})
bootQperflong=melt(bootQperf,id=c("lambda","sample"))
bootQperflong$variable=factor(bootQperflong$variable,labels=c("True Risk","Cross-Validation","Resubstitution"),levels=c("truemse","cvmse","resubmse"))
best=ddply(bootQperflong,.(sample,variable),function(data)data[which.min(data$value),])
pdf("avgriskests.pdf",height=3,width=5)
ggplot(bootQperflong,aes(x=lambda,y=value,color=variable))+geom_line()+geom_point(data=best)+facet_grid(~sample)+theme_bw()+xlab(expression(paste("Smoothing Paramter ",lambda)))+ylab("MSE")+scale_color_discrete("Risk Estimate")
dev.off()
#think truemse for bootstrap sample might be broken. compare against mcrisk
resultslong=melt(results,id=c("lambda","iteration","sample"),measure=c("psi","psi_tmle"),variable.name="est")
bootperf=ddply(resultslong,.(lambda,sample,est),function(data){
n=nrow(data)
data.frame(bias2=(mean(data$value)-trueate)^2,
mse=mean((data$value-trueate)^2),
var=((n-1)/n)*var(data$value))
})
perflong=melt(bootperf,id=c("lambda","est","sample"))
perflong$variable=factor(perflong$variable,levels=c("bias2","var","mse"))
perflong$est=factor(perflong$est,levels=c("psi","psi_tmle"),labels=c("Substitution Estimator","TMLE Estimator"))
pdf("bootperformance.pdf",height=4,width=6)
ggplot(perflong,aes(x=lambda,y=value,color=variable))+geom_line()+
facet_grid(sample~est,scales="free")+
xlab(expression(paste("Smoothing Paramter ",lambda)))+
ylab("Performance")+
scale_color_discrete("Performance Metric",labels=c(expression(Bias^2),expression(Variance),expression(MSE)))+
theme_bw()
dev.off()
iterdata=results[results$mainiteration==1&results$lambda==lambda[1],]
bootci=ddply(results,.(mainiteration,lambda),function(iterdata){
full=iterdata[!iterdata$bootstrap,]
boot=iterdata[iterdata$bootstrap,]
bootsd=sd(boot$psi_tmle)
#bootsd=sd(iterdata$psi[iterdata$bootstrap])
me=qnorm(0.975)*bootsd
est=full$psi_tmle
#est=iterdata$psi[!sldata$bootstrap]
ci=c(est-me,est+me)
coverage=((ci[1]<trueate)&(ci[2]>trueate))
reject=((ci[1]>0)|(ci[2]<0))
ci.length=ci[2]-ci[1]
results=data.frame(est=est,lower=ci[1],upper=ci[2],coverage,fullcoverage=full$coverage,reject,ci.length,bootsd=bootsd,icsd=sqrt(full$icvar/500),fulllambda=full$lambda,bootlambda=mean(boot$lambda))
results
})
mcsd=perflong[perflong$est=="TMLE Estimator"&perflong$sample=="Full Sample"&perflong$variable=="var",]
mcsd$mcsd=sqrt(mcsd$value)
mcsd=mcsd[,c("lambda","mcsd")]
sds=merge(bootci,mcsd)
sdlong=melt(sds,id="lambda",measure=c("bootsd","icsd","mcsd"))
ggplot(sdlong,aes(x=lambda,y=value,color=variable))+geom_smooth()
bootcilong=melt(bootci,id="lambda",measure=c("coverage","reject","ci.length","bootsd","fullcoverage"))
bootciavg=aggregate(bootcilong[,"value",drop=F],bootcilong[,c("lambda","variable")],mean,na.rm=T)
ggplot(bootciavg,(aes(x=lambda,y=value)))+geom_line()+facet_wrap(~variable,scales="free")+theme_bw()
ggplot(bootciavg[bootciavg$variable%in%c("coverage","fullcoverage"),],(aes(x=lambda,y=value,color=variable)))+geom_line()+theme_bw()
bootsltmle=ddply(results,.(iteration),function(iterdata){
sldata=iterdata[which.min(iterdata$cvmse),]
sldata$riskdiff=sldata$truemse-iterdata$truemse[which.min(iterdata$truemse)]
sldata$oraclelambda=iterdata$lambda[which.min(iterdata$truemse)]
sldata
})
bootlong=melt(bootsltmle,id=c("iteration","bootstrap"),measure=c("lambda","oraclelambda"))
selections=ddply(bootlong,.(bootstrap,variable),function(data){
counts=sapply(lambda,function(alambda){sum(data$value==alambda)})
data.frame(lambda=lambda,p=counts/nrow(data))
})
#pdf("bootstrapselections.pdf",height=3,width=6)
ggplot(selections,aes(x=lambda,y=p,color=factor(variable)))+geom_line()+theme_bw()+xlab("lambda")+scale_color_discrete("selector")+facet_grid(~bootstrap)
#dev.off()
iterdata=bootsltmle[bootsltmle$mainiteration==1,]
bootci=ddply(bootsltmle,.(mainiteration),function(iterdata){
full=iterdata[!iterdata$bootstrap,]
boot=iterdata[iterdata$bootstrap,]
bootsd=sd(boot$psi_tmle)
#bootsd=sd(iterdata$psi[iterdata$bootstrap])
me=qnorm(0.975)*bootsd
est=full$psi_tmle
#est=iterdata$psi[!sldata$bootstrap]
ci=c(est-me,est+me)
coverage=((ci[1]<trueate)&(ci[2]>trueate))
reject=((ci[1]>0)|(ci[2]<0))
ci.length=ci[2]-ci[1]
results=data.frame(est=est,lower=ci[1],upper=ci[2],coverage,reject,ci.length,sd=bootsd,fulllambda=full$lambda,bootlambda=mean(boot$lambda))
results
})
bootciavg=colMeans(bootci)
bootciavg
sapply(bootci,sd)
quantile(bootci$ci.length)
bootciavg=bootciavg[-1]
bootciavg
sapply(bootci,sd)
xtable(data.frame(t(bootciavg)))
test=ddply(combinedresults,.(iteration),function(iterdata){
data.frame(cvsel=which.min(iterdata$cvmse),
truesel=which.min(iterdata$truemse),
atecvsel=iterdata$psi[which.min(iterdata$cvmse)],
atetruesel=iterdata$psi[which.min(iterdata$truemse)],
tmlecvsel=iterdata$psi_tmle[which.min(iterdata$cvmse)],
tmletruesel=iterdata$psi_tmle[which.min(iterdata$truemse)])
})
fullsltmle=bootsltmle[!bootsltmle$bootstrap,]
n=nrow(fullsltmle)
plot(density(fullsltmle$psi_tmle))
mean(sqrt(fullsltmle$icvar/500))
avgcoverage=ddply(fullsltmle,.(),function(data){
data.frame(coverage=mean(data$coverage),
power=mean(data$reject),
length=mean(data$length))
})
avgcoverage$.id=NULL
avgcoverage
bootciavg
avgcoverage$length/(2*qnorm(0.975))
((n-1)/n)*sd(fullsltmle$psi_tmle)
?kernSmooth
library(kernsmooth)
density
density.default
?density
install.packages("kernsmooth")
install.packages("KernSmooth")
library(KernSmooth)
?KernSmooth
?kernsmooth
locpoly
?locpoly
x <- geyser$duration
est <- locpoly(x, bandwidth = 0.25)
data(geyser, package = "MASS")
# local linear density estimate
x <- geyser$duration
est <- locpoly(x, bandwidth = 0.25
)
system.time({est <- locpoly(x, bandwidth = 0.25)})
y <- geyser$waiting
y
system.time({fit <- locpoly(x, y, bandwidth = 0.25)})
locpoly
avgcoverage
bootciavg
avgcoverage$length/(2*qnorm(0.975))
((n-1)/n)*sd(fullsltmle$psi_tmle)
52+39+39
52+2*35
(52-28)
(52-28)+(28-12)
?KernSmooth
ksmooth
download.packages(pkgs = "stats",
destdir = ".",
type = "source")
?ksmooth
?locpoly
x=matrix(rnorm(1000*1000,nrow=1000))
x=matrix(rnorm(1000*1000,nrows=1000))
?matrix
x=matrix(rnorm(1000*1000),nrow=1000))
x=matrix(rnorm(1000*1000),nrow=1000)
boot=sample(1:1000,replace=T)
a1=x[boot,boot]
X=rnorm(1000)
n=1000
X=rnorm(n)
dist(X)
distmat=dist(X)
distmat=as.matrix(dist(X))
boot=sample(n,replace=T)
a1=distmat[boot,boot]
a2==as.matrix(X[boot])
a2=as.matrix(X[boot])
all.equal(a1,a2)
a2=as.matrix(dist(X[boot]))
all.equal(a1,a2)
system.time({
a1=distmat[boot,boot]
})
system.time({
a2=as.matrix(dist(X[boot]))
})
0.02*1e7
0.02*1e7/(60*60)
n=1000
p=500
?dist
p=200
X=matrix(rnorm(n*p),nrow=n)
distmat=as.matrix(dist(X))
dim(X)
distmat=as.matrix(dist(X))
dim(distmat)
system.time(as.matrix(dist(X)))
library(np)
?np
npksum
npksum.default
methods("npksum")
getAnywhere("npksum.default")
npkernelsum
getAnywhere("npkernelsum")
y=rnorm(n)
X=matrix(rnorm(n*p),nrow=n)
y=rnorm(n)
?kernel
?ksmooth
p=1
X=matrix(rnorm(n*p),nrow=n)
y=rnorm(n)
X2=matrix(rnorm(n*p),nrow=n)
test=ksmooth(X,y,x.points=X2)
system.time({
test=ksmooth(X,y,x.points=X2)
})
?dist
distmat=as.matrix(dist(X))
exp(distmat/bw)
bw=0.05
exp(distmat/bw)
system.time({exp(distmat/bw)})
weights={exp(distmat/bw)}
test=ksmooth(X,y,x.points=X)
y=3*X+rnorm(n)
system.time({
test=ksmooth(X,y,x.points=X)
})
plot(test,X)
test
plot(test)
y=3*sin(X)+rnorm(n)
plot(test)
plot(test,X)
system.time({
test=ksmooth(X,y,x.points=X)
})
plot(test)
test=ksmooth(X,y,x.points=X2)
system.time({
test=ksmooth(X,y,x.points=X2)
})
n
X2=matrix(rnorm(n*p),nrow=n)
system.time({
test=ksmooth(X,y,x.points=X2)
})
plot(test)
y=sin(X)+rnorm(n)
plot(test)
system.time({
test=ksmooth(X,y,x.points=X2)
})
plot(test)
system.time({
test=ksmooth(X,y,x.points=X2)
})
plot(test)
y=sin(X/5)+rnorm(n)
system.time({
test=ksmooth(X,y,x.points=X2)
})
plot(test)
system.time({
test=ksmooth(X,y,x.points=X2)
})
plot(test)
system.time({
test=ksmooth(X,y,x.points=X2)
})
plot(test)
system.time({
test=ksmooth(X,y,x.points=X2)
})
plot(test)
system.time({
test=ksmooth(X,y,x.points=X2)
})
plot(test)
X=matrix(rnorm(n*p),nrow=n)
y=sin(X/5)+rnorm(n)
distmat=as.matrix(dist(X))
bw=0.05
weights={exp(distmat/bw)}
X2=matrix(rnorm(n*p),nrow=n)
system.time({
test=ksmooth(X,y,x.points=X2)
})
plot(test)
X=matrix(rnorm(n*p),nrow=n)
y=sin(X/5)+rnorm(n)
distmat=as.matrix(dist(X))
bw=0.05
weights={exp(distmat/bw)}
X2=matrix(rnorm(n*p),nrow=n)
system.time({
test=ksmooth(X,y,x.points=X2)
})
plot(test)
library(np)
library(boot)
library(foreach)
library(doMPI)
library(doMC)
library(reshape)
setwd("/global/home/jasontrager/bootcv")
nHosts <- as.numeric(Sys.getenv('NHOSTS'))
nCores <- as.numeric(Sys.getenv('NSLOTS'))
cl <- startMPIcluster()
registerDoMPI(cl)
exportDoMPI(cl,varlist=ls())
Rprof(tmp <- tempfile())
mses=cvapply(sets,npcv,data,W.bws,a.bw)
Rprof()
pd <- readProfileData("cv.out")
printProfileCallGraph(pd)
summaryRprof("cv.out")
mses=do.call(rbind,mses)
W.bws[which.min(colSums(mses))]
wseq=seq(from=-1,to=1,length=1000)
#g=function(w){inv.logit(sin(w*pi))}
g=function(w){inv.logit(w)}
#Q=function(w,a){a+sin(w*3*pi)}
Q=function(w,a){10*w+a*(1+sin(10*pi*w))}
gendata=function(n){
w=runif(n,min=-1,max=1)
a=rbinom(n,1,g(w))
y=Q(w,a)+rnorm(n,0,0.5)
data.frame(w,a=a,afact=factor(a),y)
}
n=1000
data=gendata(n)
folds=make_folds(data)
library(origami)
library(boot)
n=1000
data=gendata(n)
folds=make_folds(data)
fold=folds[[1]]
traindata=training(fold)
fold=folds[[1]]
traindata=training(fold)
traindata=training(data)
valdata=validation(data)
bw=0.05
traindata$w
ksmooth(traindata$w,traindata$y,x.points=valdata$x,bw=0.05)
?ksmooth
ksmooth(traindata$w,traindata$y,x.points=valdata$x,bandwidth=0.05)
ksmooth(traindata$w,traindata$y,x.points=valdata$w,bandwidth=0.05)
mean((valdata$y-ksmooth(traindata$w,traindata$y,x.points=valdata$w,bandwidth=0.05)$y)^2)
cvksmooth=function(fold){
traindata=training(data)
valdata=validation(data)
mean((valdata$y-ksmooth(traindata$w,traindata$y,x.points=valdata$w,bandwidth=0.05)$y)^2)
}
cross_validate(folds,cvksmooth)
cross_validate(cvksmooth,folds)
mean((valdata$y-ksmooth(traindata$w,traindata$y,x.points=valdata$w,bandwidth=0.05)$y)^2)
cvksmooth=function(fold){
traindata=training(data)
valdata=validation(data)
mse=mean((valdata$y-ksmooth(traindata$w,traindata$y,x.points=valdata$w,bandwidth=0.05)$y)^2)
list(mse=mse)
}
cross_validate(cvksmooth,folds)
bws=seq(from=0.025,to=2,by=0.025)
bws
mses=sapply(bws,function(bw)((valdata$y-ksmooth(traindata$w,traindata$y,x.points=valdata$w,bandwidth=bw)$y)^2)
)
mses
mses=sapply(bws,function(bw)mean((valdata$y-ksmooth(traindata$w,traindata$y,x.points=valdata$w,bandwidth=bw)$y)^2))
mses
bws=seq(from=0.05,to=5,by=0.05)
?ksmooth
mses=sapply(bws,function(bw)mean((valdata$y-ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=bw)$y)^2))
mses
bws=seq(from=0.05,to=5,by=0.05)
mses=sapply(bws,function(bw)mean((valdata$y-ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=bw)$y)^2))
mses
bws=seq(from=0.05,to=100,length=100)
traindata=training(data)
valdata=validation(data)
mses=sapply(bws,function(bw)mean((valdata$y-ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=bw)$y)^2))
list(mse=mses)
cvksmooth=function(fold){
traindata=training(data)
valdata=validation(data)
mses=sapply(bws,function(bw)mean((valdata$y-ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=bw)$y)^2))
list(mse=mses)
}
results=cross_validate(cvksmooth,folds)
results$mse
cvksmooth=function(fold){
traindata=training(data)
valdata=validation(data)
mses=sapply(bws,function(bw)mean((valdata$y-ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=bw)$y)^2))
list(mse=t(mses))
}
results=cross_validate(cvksmooth,folds)
results$mse
colMeans(results$mse)
bws
plot(colMeans(results$mse))
plot(data$w,data$y)
data=data[data$a==1,]
folds=make_folds(data)
fold=folds[[1]]
bws=seq(from=0.05,to=100,length=100)
cvksmooth=function(fold){
traindata=training(data)
valdata=validation(data)
mses=sapply(bws,function(bw)mean((valdata$y-ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=bw)$y)^2))
list(mse=t(mses))
}
results=cross_validate(cvksmooth,folds)
plot(colMeans(results$mse))
ggplot(data,aes(x=w,y=y))+geom_point()
ggplot(data,aes(x=w,y=y))+geom_point()+theme_bw()
bw=100
g=ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=bw)
plot(g)
g=function(w){inv.logit(w)}
mod=ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=bw)
plot(mod)
mod=ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=0.05)
plot(mod)
mod=ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=0.005)
plot(mod)
mod=ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=0.0005)
plot(mod)
mod=ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=0.05)
plot(mod)
g(data$W)
g(data$w)
quantile(g(data$w))
mod=ksmooth(data$w,data$y,kernel="normal",x.points=valdata$w,bandwidth=0.05)
plot(mod)
bws=seq(from=0.05,to=10,length=100)
cvksmooth=function(fold){
traindata=training(data)
valdata=validation(data)
mses=sapply(bws,function(bw)mean((valdata$y-ksmooth(traindata$w,traindata$y,kernel="normal",x.points=valdata$w,bandwidth=bw)$y)^2))
list(mse=t(mses))
}
mod=ksmooth(data$w,data$y,kernel="normal",x.points=valdata$w,bandwidth=0.05)
plot(mod)
bw=100
results=cross_validate(cvksmooth,folds)
mses=(colMeans(results$mse))
mses
which.min(mses)
bestbw=bws[which.min(mses)]
r
mod
mod=ksmooth(data$w,data$y,kernel="normal",x.points=data$w,bandwidth=0.05)
plot(mod)
?make_folds
folds_resub
folds_resubstitution
orgami::folds_resubstitution
origami::folds_resubstitution
setwd("~/Dropbox/origami/")
library(devtools)
build()
install()
document()
install()
library(origami)
fold_resubstitution
install()
fold_resubstitution
library(origami)
folds_resubstitution
?make_folds
