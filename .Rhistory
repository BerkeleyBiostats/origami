library(RSmap)
library(cluster)
library(reshape2)
library(RSmap)
library(ggplot2)
library(plyr)
library(reshape)
library(KernSmooth)
library(xtable)
library(scales)
library(randomForest)
library(SuperLearner)
library(doMC)
library(lubridate)
library(RSmap)
library(cluster)
library(reshape2)
library(RSmap)
library(ggplot2)
library(plyr)
library(reshape)
library(KernSmooth)
library(xtable)
library(scales)
library(randomForest)
library(SuperLearner)
library(doMC)
library(lubridate)
options(scipen=999)
RSmap("http://50.116.1.68/backend")
#retrieve data from SMAP server
#and parse time and value columns appropriately
UUID = "b243ecce-2afe-4854-a1b2-e4a6423bde52"
START = as.POSIXct("2014-10-06 12:00:00 PST")
STOP = as.POSIXct("2014-10-12 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
table(check)
table(check$Value)
table(check$value)
ggplot(check, aes(x=time,y=value))+geom_line()
table(check$value*120)
120*42/1000
table(check$value*120*42)
table(check$value*120*42/1000)
table(check$value*120*42/1000/5000*1024)
5/1024
table(check$value*120*42/1000/5000)
table(check$value*120*42/1000/5000*1024*1024)
table(check$value*120*43/1000/5000*1024*1024)
fac=0.001*120*43
table(check$value/fac)
fac2=5000/1023
table(check$value/fac/fac2)
fac
fac2
fac=0.001*120*(1/43)
table(check$value/fac/fac2)
table(round(check$value/fac/fac2))
1:1023*fac*fac2
range(1:1023*fac*fac2)
fac
fac=0.001*120
range(1:1023*fac*fac2*(1/43))
range(1:1023*fac*fac2*(1/10))
table(round(check$value/fac/fac2))
table(round(check$value/fac/fac2/(1/43)))
5000/123
5000/1023
5/1023
UUID = "1a426678-acd9-4714-89fb-bcd4da3e2984"
START = as.POSIXct("2014-10-06 12:00:00 PST")
STOP = as.POSIXct("2014-10-12 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
START = as.POSIXct("2014-11-07 12:00:00 PST")
STOP = as.POSIXct("2014-12-12 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
UUID = "89fd7e28-fa85-4381-9bdb-cf4226a3df51"
START = as.POSIXct("2014-11-07 12:00:00 PST")
STOP = as.POSIXct("2014-12-12 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
table(check$value)
table(check$value/fac/fac2/(1/10))
round(table(check$value/fac/fac2/(1/10)))
table(round(check$value/fac/fac2/(1/10))
)
table(round(check$value/fac/fac2/(1/10)))
1:2*fac*fac2*(1/10)
START = as.POSIXct("2014-12-07 12:00:00 PST")
STOP = as.POSIXct("2014-12-12 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
table(check$value)
clean_data = function(smapStream){
sd = sd(smapStream$value)
UCL = sd*3
erroneous = which(smapStream$value > UCL)
smapStream$value[erroneous] = smapStream$value[erroneous-1]
return(smapStream)
}
ggplot(smapStream, aes(x=time,y=value))+geom_line()
UUID = "89fd7e28-fa85-4381-9bdb-cf4226a3df51"
START = as.POSIXct("2014-12-07 12:00:00 PST")
STOP = as.POSIXct("2014-12-12 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
UUID = "b9244661-13b8-4a18-b1ef-06cb1b9973f5"
START = as.POSIXct("2014-12-07 12:00:00 PST")
STOP = as.POSIXct("2014-12-12 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
UUID = "af50f9f6-7929-480a-a4ed-f6a14d4054e9"
START = as.POSIXct("2014-12-07 12:00:00 PST")
STOP = as.POSIXct("2014-12-12 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
UUID = "1d2eda23-0cc2-4b08-bf82-1855204ffd45"
START = as.POSIXct("2014-12-07 12:00:00 PST")
STOP = as.POSIXct("2014-12-12 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
UUID = "1d2eda23-0cc2-4b08-bf82-1855204ffd45"
START = as.POSIXct("2014-12-07 12:00:00 PST")
STOP = as.POSIXct("2014-12-09 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
table(round(check$value/fac/fac2/(1/10)))
table(check$value)
STOP = as.POSIXct("2014-12-07 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
START = as.POSIXct("2014-12-07 12:00:00 PST")
STOP = as.POSIXct("2014-12-08 23:59:59 PST")
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(strptime(start, "%Y-%m-%d"))*1000
end <- as.numeric(strptime(end, "%Y-%m-%d"))*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
check = query_smap(UUID,START,STOP)
ggplot(check, aes(x=time,y=value))+geom_line()
table(check$value)
60+150+120
168*52
168*52*0.15
library(reshape2)
library(ggplot2)
library(plyr)
library(RSmap)
library(shiny)
options(scipen=999)
RSmap("http://50.116.1.68/backend")
UUID = "fc3fcd42-78cb-4ddc-9421-029a52c03d8e"
UUID2 = "9f2e93fe-81e2-4d1a-868d-43d1e97af2c2"
STOP = Sys.time()
START = STOP-300
query_smap=function(uuid,start,end){
#format times as milliseconds since 1970-1-1
start <- as.numeric(start)*1000
end <- as.numeric(end)*1000
#pull data and convert to data.frame
smap_data <- RSmap.data_uuid(uuid,start,end)
smap_data = data.frame(smap_data)
#format resulting data.frame
smap_data=smap_data[which(smap_data$value!=0),] #0 indicates missing values
smap_data$time = smap_data$time/1000
smap_data$time=as.POSIXct(smap_data$time,origin="1970-01-01")
return(smap_data)
}
getdata=function(){
STOP = Sys.time()
START = STOP-300
check = query_smap(UUID,START,STOP)
STOP1=check$time[nrow(check)]+1
check2 = query_smap(UUID2,START,STOP1)
check2=check2[1:nrow(check),]
data=data.frame(time=check$time,value=check$value,se=check2$value)
data$ymin=data$value-1.96*data$se
data$ymax=data$value+1.96*data$se
return(data)
}
runApp(list(
ui = shinyUI(fluidPage(
titlePanel("PowerPatch Readings"),
plotOutput("ppPlot"),
tags$style(type="text/css", ".recalculating {opacity: 1;}")
)
)
,
server =function(input, output, session) {
output$ppPlot <- renderPlot({
invalidateLater(1000,session)
# generate an rnorm distribution and plot it
data=getdata()
ggplot(data,aes(x=time,y=value))+geom_point()+geom_line()+theme_bw()+
geom_ribbon(aes(ymin=ymin,ymax=ymax),alpha=0.3)+xlab("Time")+ylab("60hZ RMS Amplitude")+
ylim(1.5,4)+
scale_x_datetime(expand=c(0,0))
})
}
))
185*181
185*181/144
11*13
11*7
(7*12+8)*(11*12+9)
(7*12+8)*(11*12+9)+(12*12+11)*(11*12))
(7*12+8)*(11*12+9)+(12*12+11)*(11*12)
124/12
1/sqrt(2)
x=seq(from=0,to=2*pi,length=100)
y=sin(x)
plot(y)
x=seq(from=0,to=4*pi,length=100)
plot(y)
y=sin(x)
plot(y)
ypos=pmin(y,y0)
ypos=pmin(y,0)
plot(ypos)
y
ypos=pmax(y,0)
plot(ypos)
ypos^2
mean(ypos^2)
sqrt(mean(ypos^2))
sqrt(mean((ypos-mean(ypos))^2))
mean(y^2)
sqrt(mean(y^2))
mean(y)
10/4
400*5.67
library(reshape2)
library(ggplot2)
library(plyr)
library(shiny)
library(httr)
library(caTools)
#open session to server
server='http://76.102.31.114:3000'
api=handle(server)
login=GET(handle=api,path="login")
times
rawreadings$times
STOP = Sys.time()
START = STOP-300
result=getreadings(sensor_id,START,STOP)
readings
current=sapply(rawdata$readings,function(reading)reading$rms)
STOP = Sys.time()
START = STOP-300
result=getreadings(sensor_id,START,STOP)
setwd("~/Dropbox/opttx/")
#todo: add example
Qbar0 <- function(A, W) {
W1 <- W[, 1]
W2 <- W[, 2]
W3 <- W[, 3]
W4 <- W[, 4]
Qbar <- ifelse(W4 > 0, plogis(1 - W1^2 + 3 * W2 + A * (5 * W3^2 - 4.45)), plogis(-0.5 - W3 + 2 * W1 * W2 + A * (3 *
abs(W2) - 1.5)))
return(Qbar)
}
g0 <- function(W) {
rep(0.5, nrow(W))
}
gen_data <- function(n = 1000, p = 4) {
W <- matrix(rnorm(n * p), nrow = n)
colnames(W) <- paste("W", seq_len(p), sep = "")
A <- rbinom(n, 1, g0(W))
u <- runif(n)
Y <- as.numeric(u < Qbar0(A, W))
Y0 <- as.numeric(u < Qbar0(0, W))
Y1 <- as.numeric(u < Qbar0(1, W))
d0 <- as.numeric(Qbar0(1, W) > Qbar0(0, W))
Yd0 <- as.numeric(u < Qbar0(d0, W))
data.frame(W, A, Y, Y0, Y1, Yd0, d0, blip = Qbar0(1, W) - Qbar0(0, W))
}
data=gen_data()
test=opt_tmle(data)
dev_mode
dev_mode()
library(devtools())
dev_mode()
opt_tmle
build()
install()
opt_tmle
library(opttx)
opt_tmle
test=opt_tmle(data)
debug(opt_tmle)
test=opt_tmle(data)
test=opt_tmle(data)
Anode
data
data[,Anode]
install.packages("logging")
library(logging)
loginfo("test")
?loginfo
logReset()
loginfo("test")
addHandler(writeToConsole)
loginfo("test")
?verbose
options
options("verbose")
msg="test"
message(msg)
print_verbose(msg,msglevel,verbosity){
if(msglevel>verbosity){
message(msg)
}
message_verbose(msg,msglevel,verbosity){
if(msglevel>verbosity){
message(msg)
}
message_verbose(msg,msglevel,verbosity){
if(msglevel>verbosity){
message(msg)
}
message_verbose<-function(msg,msglevel,verbosity){
if(msglevel>verbosity){
message(msg)
}
message_verbose<-function(msg,msglevel,verbosity){
if(msglevel>verbosity){
message(msg)
}
}
message_verbose("Fitting Q",1,verbose)
verbose=1
message_verbose("Fitting Q",1,verbose)
message_verbose<-function(msg,msglevel,verbosity){
if(msglevel<=verbosity){
message(msg)
}
}
message_verbose("Fitting Q",1,verbose)
message_verbose("Fitting g",1,verbose)
?origami_SuperLearner
build()
install()
rm(message_verbose)
test=opt_tmle(data)
test=opt_tmle(data)
build()
install()
build()
debug(opt_tmle)
test=opt_tmle(data)
Q_fit
class(Q_fit)=c("origami_SuperLearner","SuperLearner")
Q_fit
?class
dev_mode()
setwd("~/Dropbox/origami/")
build()
document()
